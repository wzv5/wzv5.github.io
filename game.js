// Generated by CoffeeScript 1.7.1
(function() {
  var Buttle, Game, Plane, hitTest,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  hitTest = function(o1, o2) {
    var _ref, _ref1;
    if (o1.x > o2.x) {
      _ref = [o2, o1], o1 = _ref[0], o2 = _ref[1];
    }
    if (o1.x + o1.w <= o2.x) {
      return false;
    }
    if (o1.y > o2.y) {
      _ref1 = [o2, o1], o1 = _ref1[0], o2 = _ref1[1];
    }
    return o1.y + o1.h > o2.y;
  };

  Game = (function() {
    function Game() {
      this.onTimer = __bind(this.onTimer, this);
      this.flushEnemy = __bind(this.flushEnemy, this);
      this.enemy = [];
      this.timerID = 0;
      this.timerID2 = 0;
      this.keyStatus = [false, false, false, false];
      this.keyAttack = false;
    }

    Game.prototype.init = function(element) {
      this.w = element.width;
      this.h = element.height;
      this.canvas = element.getContext("2d");
      this.player = new Plane(30, 30, 100, 50, true);
      this.player.x = (this.w - this.player.w) / 2;
      this.player.y = (this.h - this.player.h) * 0.8;
      window.addEventListener("keydown", (function(_this) {
        return function(e) {
          var key;
          key = e.keyCode;
          if ((37 <= key && key <= 40)) {
            return _this.keyStatus[key - 37] = true;
          } else if (key === 32) {
            return _this.keyAttack = true;
          }
        };
      })(this));
      window.addEventListener("keyup", (function(_this) {
        return function(e) {
          var key;
          key = e.keyCode;
          if ((37 <= key && key <= 40)) {
            return _this.keyStatus[key - 37] = false;
          } else if (key === 32) {
            return _this.keyAttack = false;
          }
        };
      })(this));
      return this.canvas.clearRect(0, 0, this.w, this.h);
    };

    Game.prototype.flushEnemy = function() {
      var e, i, _i, _len, _ref;
      this.enemy = (function() {
        var _i, _len, _ref, _results;
        _ref = this.enemy;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if (e.y < this.h) {
            _results.push(e);
          }
        }
        return _results;
      }).call(this);
      if (this.enemy.length < 5) {
        if (Math.random() > 0.5) {
          e = new Plane(30, 30, 100, 1);
          e.x = Math.random() * (this.w - e.w);
          e.y = -e.h;
          this.enemy.push(e);
        }
      }
      _ref = this.enemy;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.cleanBullet(this.h);
        if (Math.random() > 0.5) {
          i.fire();
        }
      }
      if (this.keyAttack) {
        this.player.fire();
      }
      return this.player.cleanBullet(this.h);
    };

    Game.prototype.start = function() {
      this.timerID = setInterval(this.onTimer, 30);
      return this.timerID2 = setInterval(this.flushEnemy, 300);
    };

    Game.prototype.pause = function() {
      clearInterval(this.timerID);
      clearInterval(this.timerID2);
      this.timerID = 0;
      return this.timerID2 = 0;
    };

    Game.prototype.stop = function() {
      return this.pause();
    };

    Game.prototype.onTimer = function() {
      var e, i, j, o, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.canvas.clearRect(0, 0, this.w, this.h);
      _ref = this.enemy;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.y += 5;
        i.draw(this.canvas);
        _ref1 = i.bullet;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          j = _ref1[_j];
          j.y += j.speed;
        }
      }
      if (this.player.x > 0 && this.keyStatus[0]) {
        this.player.x -= 5;
      }
      if (this.player.y > 0 && this.keyStatus[1]) {
        this.player.y -= 5;
      }
      if (this.player.x + this.player.w < this.w && this.keyStatus[2]) {
        this.player.x += 5;
      }
      if (this.player.y + this.player.h < this.h && this.keyStatus[3]) {
        this.player.y += 5;
      }
      _ref2 = this.player.bullet;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        i = _ref2[_k];
        i.y -= i.speed;
      }
      this.player.draw(this.canvas);
      _ref3 = this.enemy;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        i = _ref3[_l];
        if (this.player.hitTest(i)) {
          this.onGameOver();
          return;
        }
      }
      _ref4 = this.enemy;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        i = _ref4[_m];
        _ref5 = i.bullet;
        for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
          j = _ref5[_n];
          if (j.hitTest(this.player)) {
            this.player.hp -= j.attack;
            console.log("玩家被攻击：" + j.attack + "，" + this.player.hp);
            j.aaa = true;
          }
        }
        i.bullet = (function() {
          var _len6, _o, _ref6, _results;
          _ref6 = i.bullet;
          _results = [];
          for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
            o = _ref6[_o];
            if (o.aaa !== true) {
              _results.push(o);
            }
          }
          return _results;
        })();
      }
      _ref6 = this.player.bullet;
      for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
        i = _ref6[_o];
        _ref7 = this.enemy;
        for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
          j = _ref7[_p];
          if (i.hitTest(j)) {
            j.hp -= i.attack;
            i.aaa = true;
          }
        }
      }
      this.player.bullet = (function() {
        var _len8, _q, _ref8, _results;
        _ref8 = this.player.bullet;
        _results = [];
        for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
          o = _ref8[_q];
          if (o.aaa !== true) {
            _results.push(o);
          }
        }
        return _results;
      }).call(this);
      if (this.player.hp <= 0) {
        this.onGameOver();
        return;
      }
      return this.enemy = (function() {
        var _len8, _q, _ref8, _results;
        _ref8 = this.enemy;
        _results = [];
        for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
          e = _ref8[_q];
          if (e.hp > 0) {
            _results.push(e);
          }
        }
        return _results;
      }).call(this);
    };

    Game.prototype.onGameOver = function() {
      this.stop();
      return alert("Game Over");
    };

    return Game;

  })();

  Plane = (function() {
    function Plane(w, h, hp, attack, isPlayer) {
      this.w = w;
      this.h = h;
      this.hp = hp;
      this.attack = attack;
      this.isPlayer = isPlayer != null ? isPlayer : false;
      this.x = 0;
      this.y = 0;
      this.bullet = [];
      this.hp0 = this.hp;
    }

    Plane.prototype.hitTest = function(other) {
      return hitTest(this, other);
    };

    Plane.prototype.fire = function() {
      var o;
      o = new Buttle(this.x + this.w / 2, this.y, this.attack, 10);
      if (!this.isPlayer) {
        o.y += this.h;
      }
      return this.bullet.push(o);
    };

    Plane.prototype.cleanBullet = function(maxh) {
      var o;
      return this.bullet = (function() {
        var _i, _len, _ref, _results;
        _ref = this.bullet;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          if (o.y < maxh) {
            _results.push(o);
          }
        }
        return _results;
      }).call(this);
    };

    Plane.prototype.draw = function(c) {
      var a, i, s, _i, _len, _ref, _results;
      c.save();
      a = parseInt(this.hp * 100 / this.hp0);
      s = "" + a + "%";
      if (this.isPlayer) {
        c.fillStyle = "#ff0000";
      } else {
        c.fillStyle = "#0000ff";
      }
      c.fillRect(this.x, this.y, this.w, this.h);
      c.strokeRect(this.x, this.y, this.w, this.h);
      c.textBaseline = "top";
      c.font = "10px Arial";
      c.textAlign = "center";
      c.fillText(s, this.x + this.w / 2, this.y + this.h + 2);
      c.restore();
      _ref = this.bullet;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(i.draw(c));
      }
      return _results;
    };

    Plane.prototype.onAttack = function(o) {};

    return Plane;

  })();

  Buttle = (function() {
    function Buttle(x, y, attack, speed) {
      this.x = x;
      this.y = y;
      this.attack = attack;
      this.speed = speed;
    }

    Buttle.prototype.hitTest = function(other) {
      var _ref, _ref1;
      return (other.x < (_ref = this.x) && _ref < other.x + other.w) && (other.y < (_ref1 = this.y) && _ref1 < other.y + other.y);
    };

    Buttle.prototype.draw = function(c) {
      c.save();
      c.fillStyle = "#ff00ff";
      c.beginPath();
      c.arc(this.x, this.y, 5, 0, Math.PI * 2, true);
      c.fill();
      return c.restore();
    };

    return Buttle;

  })();

  window.Game = Game;

}).call(this);
